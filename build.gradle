/*
 * Copyright 2020 Andrius Baruckis www.baruckis.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {

        gradle_version = '4.0.0'
        kotlin_version = '1.3.72'

        android_min_sdk_version = 21
        android_target_sdk_version = 29
        android_compile_sdk_version = 29
        android_build_tools_version = "29.0.3"

        // Libraries
        android_junit = '1.1.1'                     // AndroidJUnit4.
        annotation_version = '1.1.0'                // Annotation.
        app_compat_version = '1.1.0'                // AppCompat.
        arch_testing = '2.1.0'                      // Android Core Testing.
        constraint_layout_version = '1.1.3'         // ConstraintLayout.
        coroutines_version = '1.3.7'                // Kotlin Coroutines.
        espresso_version = '3.2.0'                  // Espresso.
        dagger_version = '2.28'                     // Dagger.
        javax_inject_version = '1'                  // Javax Inject.
        lifecycle_version = '2.2.0'                 // Android Lifecycle Extensions.
        okhttp_version = '4.7.2'                    // OkHttp.
        recyclerview_version = '1.1.0'              // RecyclerView.
        retrofit_version = '2.9.0'                  // Retrofit.
        robolectric_version = '4.3.1'               // Robolectric.
        room_version = '2.2.5'                      // Room.
        rx_android_version = '2.1.1'                // RxAndroid.
        rx_java_version = '2.2.19'                  // RxJava.
        rx_kotlin_version = '2.4.0'                 // RxKotlin.
        swipe_refresh_layout_version = '1.0.0'      // SwipeRefreshLayout
        material_version = '1.1.0'                  // Material Components.
        mockito_version = '3.3.3'                   // Mockito.
        test_core_version = '1.2.0'                 // AndroidX Test Library.


        domainDependencies = [
                javaxInject: "javax.inject:javax.inject:${javax_inject_version}",
                kotlin     : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                rxJava     : "io.reactivex.rxjava2:rxjava:${rx_java_version}",
                rxKotlin   : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}"
        ]

        domainTestDependencies = [
                kotlinJUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito    : "org.mockito:mockito-core:${mockito_version}"
        ]

        dataDependencies = [
                javaxInject: "javax.inject:javax.inject:${javax_inject_version}",
                kotlin     : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                rxKotlin   : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}"
        ]

        dataTestDependencies = [
                kotlinJUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito    : "org.mockito:mockito-core:${mockito_version}"
        ]

        remoteDependencies = [
                javaxInject      : "javax.inject:javax.inject:${javax_inject_version}",
                kotlin           : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                okHttp           : "com.squareup.okhttp3:okhttp:${okhttp_version}",
                okHttpLogger     : "com.squareup.okhttp3:logging-interceptor:${okhttp_version}",
                rxKotlin         : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}",
                retrofit         : "com.squareup.retrofit2:retrofit:${retrofit_version}",
                retrofitAdapter  : "com.squareup.retrofit2:adapter-rxjava2:${retrofit_version}",
                retrofitConverter: "com.squareup.retrofit2:converter-gson:${retrofit_version}"
        ]

        remoteTestDependencies = [
                kotlinJUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito    : "org.mockito:mockito-core:${mockito_version}"
        ]

        localDependencies = [
                annotation  : "androidx.annotation:annotation:${annotation_version}",
                javaxInject : "javax.inject:javax.inject:${javax_inject_version}",
                kotlin      : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                roomCompiler: "androidx.room:room-compiler:${room_version}",
                roomRuntime : "androidx.room:room-runtime:${room_version}",
                roomRxJava  : "androidx.room:room-rxjava2:${room_version}",
                rxKotlin    : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}"
        ]

        localTestDependencies = [
                archTesting: "androidx.arch.core:core-testing:${arch_testing}",
                kotlinJUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito    : "org.mockito:mockito-core:${mockito_version}",
                robolectric: "org.robolectric:robolectric:${robolectric_version}",
                testCore   : "androidx.test:core:${test_core_version}"
        ]

        presentationDependencies = [
                coroutines         : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}",
                coroutinesViewModel: "androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycle_version}",
                javaxInject        : "javax.inject:javax.inject:${javax_inject_version}",
                kotlin             : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                rxKotlin           : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}",
                lifecycleExtensions: "androidx.lifecycle:lifecycle-extensions:${lifecycle_version}"
        ]

        presentationTestDependencies = [
                archTesting   : "androidx.arch.core:core-testing:${arch_testing}",
                coroutinesTest: "org.jetbrains.kotlinx:kotlinx-coroutines-test:${coroutines_version}",
                kotlinJUnit   : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito       : "org.mockito:mockito-core:${mockito_version}"
        ]

        uiDependencies = [
                appCompat         : "androidx.appcompat:appcompat:${app_compat_version}",
                constraintLayout  : "androidx.constraintlayout:constraintlayout:${constraint_layout_version}",
                coroutines        : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}",
                dagger            : "com.google.dagger:dagger:${dagger_version}",
                daggerCompiler    : "com.google.dagger:dagger-compiler:${dagger_version}",
                daggerProcessor   : "com.google.dagger:dagger-android-processor:${dagger_version}",
                daggerSupport     : "com.google.dagger:dagger-android-support:${dagger_version}",
                javaxInject       : "javax.inject:javax.inject:${javax_inject_version}",
                kotlin            : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                material          : "com.google.android.material:material:${material_version}",
                recyclerView      : "androidx.recyclerview:recyclerview:${recyclerview_version}",
                rxAndroid         : "io.reactivex.rxjava2:rxandroid:${rx_android_version}",
                swipeRefreshLayout: "androidx.swiperefreshlayout:swiperefreshlayout:${swipe_refresh_layout_version}"
        ]

        uiTestDependencies = [
                androidJUnit   : "androidx.test.ext:junit:${android_junit}",
                dagger         : "com.google.dagger:dagger:${dagger_version}",
                daggerCompiler : "com.google.dagger:dagger-compiler:${dagger_version}",
                daggerProcessor: "com.google.dagger:dagger-android-processor:${dagger_version}",
                daggerSupport  : "com.google.dagger:dagger-android-support:${dagger_version}",
                espresso       : "androidx.test.espresso:espresso-core:${espresso_version}",
                kotlinJUnit    : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito        : "org.mockito:mockito-core:${mockito_version}"
        ]

    }


    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
